"""
Ale Gudiel 19232

--------Laboratorio B--------

Este laboratorio consiste en la implementaci√≥n de un subconjunto de algoritmos b√°sicos de aut√≥matas finitos y expresiones regulares. Deber√° desarrollar un programa que acepte como entrada una expresi√≥n regular ùëü y una cadena ùë§ .
Este laboratorio combina el trabajo generado en el Laboratorio A y lo extiende para desarrollar la base del generador de analizadores l√©xicos.
A partir de ùëü deber√° construir un AFN (NFA), el cual deber√° transformar posteriormente a un AFD (DFA); adem√°s, deber√° generar tambi√©n un AFD directamente de la expresi√≥n regular r. Con los aut√≥matas generados deber√° determinar si ùë§ ‚àà ùêø(ùëü).

Especificaci√≥n del funcionamiento del programa
‚óè Entrada
    o Una expresi√≥n regular ùëü .
    o Una cadena ùë§ a ser validada. 
‚óè Salida
    o Por cada AF (Aut√≥mata Finito) generado a partir de ùëü , es decir, por cada AFD y AFN generado:
        ‚ñ™ El programa debe indicar si ùë§ ‚àà ùêø(ùëü) con un ‚Äús√≠‚Äù en caso el enunciado anterior sea correcto, de lo contrario deber√° mostrar un ‚Äúno‚Äù.
        ‚ñ™ Adem√°s, deber√° generar como output adicional una imagen con el Grafo correspondiente para el AF generado, mostrando el estado inicial, los estados adicionales, el estado de aceptaci√≥n y las transiciones con sus s√≠mbolos correspondientes.
"""
###### ----> Ejemplos del pre-lab
# print(infixToPostfix('ab ‚àó ab ‚àó'))
# print(infixToPostfix('0? (1? )? 0 ‚àó')) 
# print(infixToPostfix('(a*|b*)c')) 
# print(infixToPostfix('(b|b)*abb(a|b)*')) 
# print(infixToPostfix('(a|Œµ)b(a+)c?'))
# print(infixToPostfix('(a|b)*a(a|b)(a|b)'))


# Importamos las librer√≠as necesarias.
from validations import *
from reToPosfix import infixToPostfix
from thompsonAlgorithm import thompsonBuild
from showNFA import drawNFA


# Pedimos la expresi√≥n regular (regex) al usuario.
r = input("\nIngrese la expresi√≥n regular: ")
print('-----------------------------------------')

# Validamos la expresi√≥n regular
# Si es v√°lida, se procede a convertirla a notaci√≥n posfija
# Si no es v√°lida, se muestra un mensaje de error
if checkForErrors(r) == []:
    print('La expresi√≥n regular es v√°lida')
    print('-----------------------------------------')
    postfixExp = infixToPostfix(r)
    print('La expresi√≥n regular en notaci√≥n posfija es: ', postfixExp)
    print('-----------------------------------------')
    # Si el regex es v√°lido, se procede a construir el AFN
    print('El AFN construido es: ')
    nfaBuilt = thompsonBuild(postfixExp)
    print('-----------------------------------------')
    print('Mostrando el NFA...')
    # Mostramos el AFN
    drawNFA(nfaBuilt)

else:
    print('La expresi√≥n regular es inv√°lida')
    print('-----------------------------------------')
    print('Errores encontrados: ')
    for error in checkForErrors(r):
        print(error)